import static java.lang.Math.*;
import java.util.*;
import java.io.*;
import org.joda.time.*;
import static com.jeff.fx.common.CandleValueModel.*;
import static com.jeff.fx.common.OfferSide.*;
import static com.jeff.fx.common.Instrument.*;
import static com.jeff.fx.common.FXDataSource.*;
import static com.jeff.fx.common.Period.*;
import com.jeff.fx.backtest.engine.*;
import com.jeff.fx.backtest.strategy.*;
import com.jeff.fx.backtest.strategy.coder.*;
import com.jeff.fx.common.*;
import com.jeff.fx.util.*;
import com.jeff.fx.indicator.*;


public class ~className extends CodedStrategy {

	private List<StrategyParam> paramsList = new ArrayList<StrategyParam>();
	private IndicatorCache indicators;
	private CandleCollection candles;
	
~fields

	public void setup(Map<String, Object> param, IndicatorCache indicators, CandleCollection candles) {
		
		this.indicators = indicators;
		this.candles = candles;

~params	
	}
	
	public String getName() {
		return "~className";
	}

	public boolean open(CandleDataPoint candle, int idx) throws Exception {
		
		if(getOrderBook().getOpenOrders().size() == 0) {
		
			boolean open = false;
			BTOrder order = new BTOrder();
			order.setUnits(1.0);
			
			~openCode
			
			if(open) {
				openOrder(order, candle);
				return true;
			}
		}
		
		return false;
	}

	public boolean close(CandleDataPoint candle, int idx) throws Exception {
		
		if(getOrderBook().getOpenOrders().size() > 0) {			
		
			BTOrder order = getOrderBook().getOpenOrders().get(0);
			boolean close = false;
			
			~closeCode
			
			if(close) {
				closeOrder(order, candle);
				return true;
			}
		}
		
		return false;
	}
}