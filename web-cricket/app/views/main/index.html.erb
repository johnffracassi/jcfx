<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<title>WebCricket v0.001</title>
	</head>

	<body>
        <canvas id="canvas" width="1000px" height="750px"></canvas>
    </body>

    <script type="text/javascript">
        canvas = document.getElementById("canvas");
        g = canvas.getContext("2d");
        targetFPS = 60;
        actualFPS = 0;
        frameCounter = 0
        gameTime = 0.0;
        gameResetTime = 0.0;
        screenOrigin = [500,450];
    </script>

    <%= javascript_include_tag('model/class') %>
    <%= javascript_include_tag('jquery-1.5.1.min') %>
    <%= javascript_include_tag('jquery-ui-1.8.13.custom.min') %>
    <%= javascript_include_tag('data/sprites') %>
    <%= javascript_include_tag('data/animations') %>
    <%= javascript_include_tag('data/field_settings') %>
    <%= javascript_include_tag('data/util') %>
    <%= javascript_include_tag('model/fielders') %>
    <%= javascript_include_tag('model/ground') %>
    <%= javascript_include_tag('model/pitch') %>
    <%= javascript_include_tag('model/ball') %>

    <br/>
    <%= button_to_function("Reset", "reset()") %>
    <%= button_to_function("Bowl", "bowl_start()") %>
    <%= button_to_function("Umpire Idle", "personController.umpire.setState('Idle')") %>
    <%= button_to_function("Umpire 4", "personController.umpire.setState('SignalFour')") %>
    <%= button_to_function("Umpire 6", "personController.umpire.setState('SignalSix')") %>
    <%= button_to_function("Umpire Wide", "personController.umpire.setState('SignalWide')") %>
    <%= button_to_function("Umpire LegBye", "personController.umpire.setState('SignalLegBye')") %>
    <%= button_to_function("Umpire Bye", "personController.umpire.setState('SignalBye')") %>
    <%= button_to_function("Umpire Out", "personController.umpire.setState('SignalOut')") %>
    <br/>
    <input type="text" id="vx" value="-2" size="3" onkeyup="updateVelocity();" />
    <input type="text" id="vy" value="-35" size="3" onkeyup="updateVelocity();" />
    <input type="text" id="vz" value="-8" size="3" onkeyup="updateVelocity();" />
    <input type="text" id="v" value="0kph" size="3" />
    <br/>
    <input type="text" id="ballX" value="1.3" size="3" />
    <input type="text" id="ballY" value="21.5" size="3" />
    <input type="text" id="ballZ" value="2.4" size="3" />
    <%= button_to_function("Fire!", "projectBall()") %>

    <script type="text/javascript">
        function updateVelocity() {
            var vx = parseFloat(document.getElementById("vx").value);
            var vy = parseFloat(document.getElementById("vy").value);
            var vz = parseFloat(document.getElementById("vz").value);
            v = Math.sqrt(vx*vx + vy*vy + vz*vz) * 3.6;
            document.getElementById("v").value = Math.floor(v) + "kph";
        }
            updateVelocity();
    </script>


    <script type="text/javascript">
        var mouseLoc = [0,0];
        var shotpoints = null;
        var recording = false;

        var pitchRenderer = new PitchRenderer();
        var pitchModel = new PitchModel();
        var stumpRenderer = new StumpsRenderer();
        var stumpModel = new StumpsModel();
        var groundRenderer = new GroundRenderer();
        var groundModel = new GroundModel();

        init();
        gameLoop();

        // =============================================================================================================
        // Game state updates
        // =============================================================================================================

        function update()
        {
            gameTime = (new Date().getTime() - gameResetTime) / 1000.0;

            if(recording)
            {
                shotpoints.push([mouseLoc[0], mouseLoc[1]]);
                var mid = Math.floor(shotpoints.length / 2);
                var end = shotpoints.length - 1;
            }
        }


        // =============================================================================================================
        // bowling
        // =============================================================================================================
        function bowl_start()
        {
            personController.bowler.runTo([1.2,21], bowl_arrive);
        }

        function bowl_arrive(bowler)
        {
            personController.bowler.setState("Action");
            setTimeout("bowl_releaseball()", 275);
        }

        function bowl_releaseball()
        {
            var vx = parseFloat(document.getElementById("vx").value);
            var vy = parseFloat(document.getElementById("vy").value);
            var vz = parseFloat(document.getElementById("vz").value);
            ballModel.setProjectile([1.0, 22, 2.1], [vx,vy,vz]);
            bat_recordshot();
            setTimeout("wk_getIntoPosition()", 250);
            setTimeout("bat_playshot()", 500);
        }


        // =============================================================================================================
        // wicket keeper
        // =============================================================================================================
        function wk_getIntoPosition()
        {
            var intersection = fastestTimeToPath(personController.keeper, ballModel.path);
            personController.keeper.walkTo(intersection['location']);
            ballModel.path.terminateAt(intersection['ballTime']);
        }

        // =============================================================================================================
        // batting
        // =============================================================================================================

        function bat_recordshot()
        {
            recording = true;
            shotpoints = new Array();
        }

        function bat_playshot()
        {
            recording = false;
        }

        function renderShotPath()
        {
            if(shotpoints != null && shotpoints.length > 3)
            {
                g.beginPath();
                var mid = Math.floor(shotpoints.length / 2);
                var end = shotpoints.length - 1;
                g.moveTo(shotpoints[0][0], shotpoints[0][1]);
                g.moveTo(shotpoints[mid][0], shotpoints[mid][1]);
                g.moveTo(shotpoints[end][0], shotpoints[end][1]);
                g.strokeStyle = "red";
                g.stroke();
            }
        }

        // =============================================================================================================
        // render loop
        // =============================================================================================================

        function render()
        {
            renderFixtures();
            renderPeople();
            ballRenderer.render();
            renderShotPath();
            renderOverlay();
        }

        function renderFixtures()
        {
            groundRenderer.render(groundModel, g, [0,0]);
            pitchRenderer.render(pitchModel, g, [0,0]);
            stumpRenderer.render(stumpModel, g, [0,0]);
            stumpRenderer.render(stumpModel, g, [0,21.5]);
        }

        function renderOverlay()
        {
            g.fontSize = "11pt";
            g.fillStyle = "black";
            g.fillText("frameCounter: " + frameCounter, 30, 34);
            g.fillText("gameTime: " + gameTime.toFixed(2), 30, 54);
            if(gameTime > 0)
            {
                actualFPS = (frameCounter / gameTime);
                g.fillText("fps: " + actualFPS.toFixed(1) + "fps", 30, 74);
            }

            if(shotpoints != null)
            {
                var dx = shotpoints[shotpoints.length-1][0] - shotpoints[0][0];
                var dy = shotpoints[shotpoints.length-1][1] - shotpoints[0][1];
                var dist = Math.sqrt(dx*dx + dy*dy);
                var ang = angle(dx, dy);
                g.fillText("recorded shot: " + shotpoints.length + "pts / dist=" + (0|dist) + " / ang=" + (1|ang), 30, 94);
            }
        }

        function renderPeople()
        {
            var people = personController.all();
            for(var i=0; i<people.length; i++)
            {
                var person = people[i];
                var sloc = convertWorldToScreen(person.location());

                drawAnimation(person.animKey(), sloc, person.lastStateUpdate);

                if(mouseDistance(sloc) < 25)
                {
                    g.fillStyle = "white";
                    g.fillText(person.display(), sloc[0] - 10, sloc[1] + 10);
                }
            }
        }

        function mouseDistance(loc)
        {
            var dx = loc[0] - mouseLoc[0];
            var dy = loc[1] - mouseLoc[1];
            return Math.sqrt(dx*dx + dy*dy);
        }

        // =============================================================================================================
        // Game setup
        // =============================================================================================================

        function init()
        {
            canvas.addEventListener('mousemove', mousemove, false);
            canvas.addEventListener('click', mouseclick, false);

            g.width = 800;
            g.height = 600;

            personController = new PersonController();
            reset();
        }

        function reset()
        {
            gameTime = 0.0;
            gameResetTime = new Date().getTime();
            frameCounter = 0;
            shotpoints = null;
            personController.reset();
        }

        function mouseclick(ev)
        {
            personController.sendFielderTo(convertScreenToWorld([ev.layerX, ev.layerY]));
        }

        function mousemove(ev)
        {
            // Get the mouse position relative to the canvas element.
            if (ev.layerX || ev.layerX == 0)
            {
                mouseLoc = [ev.layerX, ev.layerY];
            }
            else if (ev.offsetX || ev.offsetX == 0)
            {
                mouseLoc = [ev.offsetX, ev.offsetY];
            }
        }

        function gameLoop()
        {
            update();
            clearScreen();
            render();
            setTimeout("gameLoop()", 1000.0 / targetFPS);
        }

        function clearScreen()
        {
            frameCounter ++;

            // clear screen
            g.fillStyle = "#efe";
            g.fillRect(0, 0, 10000, 10000);
        }

    </script>
</html>
