<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<title>WebCricket v0.001</title>
	</head>

	<body>
        <canvas id="canvas" width="1000px" height="750px"></canvas>
    </body>

    <script type="text/javascript">
        canvas = document.getElementById("canvas");
        g = canvas.getContext("2d");
        targetFPS = 50;
        actualFPS = 0;
        frameCounter = 0
        gameTime = 0.0;
        gameResetTime = 0.0;
        screenOrigin = [500,450];
    </script>

    <%= javascript_include_tag('model/class') %>
    <%= javascript_include_tag('jquery-1.5.1.min') %>
    <%= javascript_include_tag('jquery-ui-1.8.13.custom.min') %>

    <%= javascript_include_tag('data/sprites') %>
    <%= javascript_include_tag('data/animations') %>
    <%= javascript_include_tag('data/field_settings') %>
    <%= javascript_include_tag('data/util') %>
    <%= javascript_include_tag('model/fielders') %>
    <%= javascript_include_tag('model/ground') %>
    <%= javascript_include_tag('model/pitch') %>
    <%= javascript_include_tag('model/ball') %>

    <br/>
    <%= button_to_function("Reset", "reset()") %>
    <%= button_to_function("Bowl", "bowl_start()") %>
    <%= button_to_function("Return Ball", "throwBallToKeeper()") %>
    <br/>
    Bowling Velocity Matrix<br/>
    <input type="text" id="vx" value="-2" size="3" onkeyup="updateVelocity();" />
    <input type="text" id="vy" value="-35" size="3" onkeyup="updateVelocity();" />
    <input type="text" id="vz" value="-8" size="3" onkeyup="updateVelocity();" />
    <input type="text" id="v" value="0kph" size="3" />

    <script type="text/javascript">
        function updateVelocity() {
            var vx = parseFloat(document.getElementById("vx").value);
            var vy = parseFloat(document.getElementById("vy").value);
            var vz = parseFloat(document.getElementById("vz").value);
            v = Math.sqrt(vx*vx + vy*vy + vz*vz) * 3.6;
            document.getElementById("v").value = Math.floor(v) + "kph";
        }
            updateVelocity();
    </script>


    <script type="text/javascript">
        var mouseLoc = [0,0];
        var shotpoints = null;
        var recording = false;

        var pitchRenderer = new PitchRenderer();
        var pitchModel = new PitchModel();
        var stumpRenderer = new StumpsRenderer();
        var stumpModel = new StumpsModel();
        var groundRenderer = new GroundRenderer();
        var groundModel = new GroundModel();

        init();
        gameLoop();

        // =============================================================================================================
        // Game state updates
        // =============================================================================================================

        function update()
        {
            gameTime = (new Date().getTime() - gameResetTime) / 1000.0;
            ballModel.updateLocation();

            if(recording)
            {
                shotpoints.push([mouseLoc[0], mouseLoc[1]]);
                var mid = Math.floor(shotpoints.length / 2);
                var end = shotpoints.length - 1;
            }
        }


        // =============================================================================================================
        // bowling
        // =============================================================================================================
        function bowl_start()
        {
            personController.bowler.runTo([1.2,21], bowl_arrive);
            ballModel.visible = false;
        }

        function bowl_arrive(bowler)
        {
            personController.bowler.setState("Action");
            setTimeout("bowl_releaseball()", 275);
        }

        function bowl_releaseball()
        {
            var vx = parseFloat(document.getElementById("vx").value);
            var vy = parseFloat(document.getElementById("vy").value);
            var vz = parseFloat(document.getElementById("vz").value);

            ballModel.setProjectile([1.0, 22, 2.1], [vx,vy,vz]);
            ballModel.visible = true;

            bat_recordshot();

            setTimeout("wk_getIntoPosition()", 250);
        }


        // =============================================================================================================
        // wicket keeper
        // =============================================================================================================
        function wk_getIntoPosition()
        {
            var keeperTargetLoc = ballModel.path.getLocForFirstYLessThan(personController.keeper.location[1]);
            personController.keeper.runTo(keeperTargetLoc);
//            ballModel.path.terminateAt(intersection['ballTime']);
            ballModel.addProximityTrigger(keeperTargetLoc, function() {
                ballModel.visible = false;
            });
        }

        // =============================================================================================================
        // batting
        // =============================================================================================================

        function bat_recordshot()
        {
            recording = true;
            shotpoints = new Array();
            ballModel.addProximityTrigger(function() { return ballModel.currentLoc[1] < 0 }, bat_playshot);
        }

        function bat_playshot()
        {
            recording = false;

            var dx = shotpoints[shotpoints.length-1][0] - shotpoints[0][0];
            var dy = shotpoints[shotpoints.length-1][1] - shotpoints[0][1];
            var dist = distance2d(shotpoints[shotpoints.length-1], shotpoints[0]);

            if(dist < 15)
            {
                return;
            }
            else if(dist < 50)
            {
                var vx = 4;
                var vy = 3;
                var vz = -2;
            }
            else
            {
                var vx = dx / 10;
                var vy = -dy / 10;
                var vz = 0;
            }

            ballModel.setProjectile(ballModel.currentLoc, [vx,vy,vz]);
            ballModel.visible = true;

            var intersection = personController.sendFielderAfterBall();
            ballModel.path.terminateAt(intersection['ballTime']);
            ballModel.addProximityTrigger(function() {
                return (gameTime - ballModel.pathStartTime) >= intersection['personTime'];
            }, function() {
                pickUpAndReturnBall(intersection['person']);
            }, 1.2);
        }

        function pickUpAndReturnBall(person)
        {
            if(person.currentLoc[0] < 0)
            {
                person.setState("PickingUpBall_L");
            }
            else
            {
                person.setState("PickingUpBall_R");
            }
            ballModel.visible = false;
            setTimeout(throwBallToKeeper, 500);
        }

        function throwBallToKeeper()
        {
            path = approximateTrajectory(ballModel.currentLoc, personController.keeper.location(), 25);
            ballModel.setProjectilePath(path);
            ballModel.visible = true;
        }

        // =============================================================================================================
        // render loop
        // =============================================================================================================

        function render()
        {
            frameCounter ++;
            clearScreen();
            renderFixtures();
            renderPeople();
            renderBall();
            renderShotPath();
            renderOverlays();
        }

        function clearScreen()
        {
            // clear screen
            g.fillStyle = "#efe";
            g.fillRect(0, 0, 1000, 1000);
        }

        function renderFixtures()
        {
            groundRenderer.render(groundModel, g, [0,0]);
            pitchRenderer.render(pitchModel, g, [0,0]);
            stumpRenderer.render(stumpModel, g, [0,0]);
            stumpRenderer.render(stumpModel, g, [0,21.5]);
        }
        function renderPeople()
        {
            var people = personController.all();
            for(var i=0; i<people.length; i++)
            {
                var person = people[i];
                var sloc = convertWorldToScreen(person.location());

                drawAnimation(person.animKey(), sloc, person.lastStateUpdate);

                if(mouseDistance(sloc) < 25)
                {
                    g.fillStyle = "white";
                    g.fillText(person.display(), sloc[0] - 10, sloc[1] + 10);
                }
            }
        }

        function renderBall()
        {
            ballRenderer.render();
        }

        function renderShotPath()
        {
            if(shotpoints != null && shotpoints.length > 3)
            {
                var mid = Math.floor(shotpoints.length / 2);
                var end = shotpoints.length - 1;
                g.beginPath();
                g.moveTo(shotpoints[0][0], shotpoints[0][1]);
                g.lineTo(shotpoints[mid][0], shotpoints[mid][1]);
                g.lineTo(shotpoints[end][0], shotpoints[end][1]);
                g.strokeStyle = "rgba(255,0,0,0.2)";
                g.stroke();
            }
        }

        function renderOverlays()
        {
            g.fontSize = "11pt";
            g.fillStyle = "black";
            g.fillText("frameCounter: " + frameCounter, 30, 34);
            g.fillText("gameTime: " + gameTime.toFixed(2), 30, 54);
            if(gameTime > 0)
            {
                actualFPS = (frameCounter / gameTime);
                g.fillText("fps: " + actualFPS.toFixed(1) + "fps", 30, 74);
            }

            if(shotpoints != null)
            {
                var dx = shotpoints[shotpoints.length-1][0] - shotpoints[0][0];
                var dy = shotpoints[shotpoints.length-1][1] - shotpoints[0][1];
                var dist = distance2d(shotpoints[shotpoints.length-1], shotpoints[0]);
                var ang = angle(dx, dy);
                g.fillText("recorded shot: " + shotpoints.length + "pts / dist=" + (0|dist) + " / ang=" + (1|ang), 30, 94);
            }
        }

        // =============================================================================================================
        // Game setup
        // =============================================================================================================

        function init()
        {
            canvas.addEventListener('mousemove', mousemove, false);
            canvas.addEventListener('click', mouseclick, false);

            personController = new PersonController();
            reset();
        }

        function reset()
        {
            gameTime = 0.0;
            gameResetTime = new Date().getTime();
            frameCounter = 0;
            shotpoints = null;
            
            personController.reset();
            ballModel.reset();
        }

        function mouseclick(ev)
        {
            personController.sendFielderTo(convertScreenToWorld([ev.layerX, ev.layerY]));
        }

        function mousemove(ev)
        {
            // Get the mouse position relative to the canvas element.
            if (ev.layerX || ev.layerX == 0)
            {
                mouseLoc = [ev.layerX, ev.layerY];
            }
            else if (ev.offsetX || ev.offsetX == 0)
            {
                mouseLoc = [ev.offsetX, ev.offsetY];
            }
        }

        function mouseDistance(loc)
        {
            return distance2d(loc, mouseLoc);
        }

        function gameLoop()
        {
            update();
            render();
            setTimeout("gameLoop()", 1000.0 / targetFPS);
        }

    </script>
</html>
